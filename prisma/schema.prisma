// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviews       Review[]
  notifications Notification[]
}

model ExchangePoint {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          String    // "ATM" or "EXCHANGE"
  address       String
  latitude      Float
  longitude     Float
  cryptos       String[]  // List of supported cryptocurrencies
  fiatCurrencies String[] // List of supported fiat currencies
  workingHours  String
  fees          Json      // Structure to store different fees
  status        String    // "ACTIVE", "INACTIVE", "MAINTENANCE"
  contactInfo   String?
  website       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviews       Review[]
  ratingAvg     Float     @default(0)
  reviewCount   Int       @default(0)
}

model Review {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  rating        Int
  comment       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @db.ObjectId
  exchangePoint ExchangePoint @relation(fields: [exchangePointId], references: [id])
  exchangePointId String     @db.ObjectId
}

model Notification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  type          String    // "RATE_CHANGE", "STATUS_CHANGE", "MAINTENANCE"
  message       String
  read          Boolean   @default(false)
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
}

model ExchangeRate {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  fromCurrency  String
  toCurrency    String
  rate          Float
  timestamp     DateTime  @default(now())
  source        String    // Source of the exchange rate data
}
